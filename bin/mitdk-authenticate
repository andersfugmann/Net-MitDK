#!perl
use strict;
use warnings;
use IO::Lambda qw(:all);
use IO::Lambda::HTTP::Client qw(http_request);
use IO::Lambda::HTTP::Server;
use IO::Lambda::HTTP::UserAgent;
use URI;
use URI::QueryParam;
use URI::Escape;
use HTTP::Request;
use HTTP::Request::Common;
use HTTP::Response;
use MIME::Base64 qw(encode_base64url decode_base64url);
use Digest::SHA qw(sha256);
use JSON::XS qw(decode_json encode_json);
use Net::MitDK;

$|++;

my $port = 9999;
my ($server, $error, $e);
my ($state, $code_challenge, $code_verifier, $nonce);
my $ua = IO::Lambda::HTTP::UserAgent->new;
my $mgr = Net::MitDK::ProfileManager->new;
my $profile = '';

sub randstr($) { encode_base64url(join('', map { chr rand(255) } 1..$_[0])) }
sub init_oauth
{
	$state          = randstr(23);
	$nonce          = randstr(93);
	$code_verifier  = randstr(93);
	$code_challenge = encode_base64url(sha256($code_verifier));
}

sub quit      { '<p><a href="/abort">Quit the wizard</a><p>' }
sub main      { '<p><a href="/">Go back to the start</a><p>' }

sub html($)
{
	my $html = $_[0];
	$html = "<html><body>$html</body></html>";
	HTTP::Response->new( 200, "OK", [
		'Content-Type'   => 'text/html',
		'Content-Length' => length($html),
	], $html)
}

sub h2($)      { html "<h2>$_[0]</h2>" . main . quit }
sub h2x($$)    { html "<h2>$_[0]</h2><p>$_[1]" . main . quit } 
sub error($)   { h2x( 'Error', $_[0] ) }

my %routes;
%routes = (
	'/auth' => sub {

		html <<INIT . quit;
<h2>Welcome to the MitDK/Nemid authenticator setup</h2>
<p>
You shall need to login to NemID to create an initial login token for this mitdk program.
Thereafter the program should be able to login to MitID by itself.<br>The token will be saved in
<code>${\($mgr->homepath . q(/default.profile))}</code>. Refer to the documentation
if you need more than one user per installation.

<form action="/step2" method="POST">

<p> On the next page you will be presented
the standard NemID dialog, that you need to login as you usually do.<br>
If you are going to authorize the login with your NemID app, make sure that
the requestor is "Mit-DK login".

<p>
<input type="submit" value="NemID Login">
</form>
INIT
	},

	'/step2' => sub {
		init_oauth();
		$ua->request( HTTP::Request->new(
			GET => 'https://gateway.mit.dk/view/client/authorization/login?'.
				'client_id=view-client-id-mobile-prod-1-id&'.
				'response_type=code&'.
				'scope=openid&'.
				"state=$state&".
				"code_challenge=$code_challenge&".
				'code_challenge_method=S256&'.
				'response_mode=query&'.
				"nonce=$nonce&".
				'redirect_uri=com.netcompany.mitdk://nem-callback&'.
				'deviceName=mitdk-authenticator-perl&'.
				'deviceId=pc&'.
				'lang=en_US'
			),
			max_redirect => 20,
		);
	},

	'/LoginOption.aspx' => sub  {
		$server->shutdown;

		my $req = shift;
		$req->uri("https://nemlog-in.mitid.dk".$req->uri);
		$req->header( Host    => 'nemlog-in.mitid.dk');
		$req->header( Origin  => 'https://nemlog-in.mitid.dk');
		$req->header( Referer => 'https://nemlog-in.mitid.dk/LoginOption.aspx');
		$req->header( 'Accept-Encoding' => 'identity');
		$req->headers->remove_header('Cookie');
		my $resp = $ua->request($req)->wait;
		return $resp unless $resp->is_success;
		return error "Cannot get NemID ticket" unless $resp->content =~ /name="(SAMLResponse)" value="(.*?)"/;
		my $saml = "$1=" . uri_escape($2);

		$resp = $ua->request(
			HTTP::Request::Common::POST(
				'https://gateway.digitalpost.dk/auth/s9/nemlogin/ssoack',
				Content => $saml
			),
		)->wait;
		return error("NemID ticket is received but cannot login to MitDK")
			unless ($resp->header('Location') // '') =~ m[(com.netcompany.mitdk://nem-callback)\?.*code=([^\&]+)];

		$resp = $ua->request(
			HTTP::Request::Common::POST(
				'https://gateway.mit.dk/view/client/authorization/token?'.
					'grant_type=authorization_code&'.
					"redirect_uri=$1&".
					'client_id=view-client-id-mobile-prod-1-id&'.
					"code=$2&".
					"code_verifier=$code_verifier"
				)
		)->wait;
		return error("NemID ticket is received but cannot authorize to MitDK") unless
			$resp->is_success && $resp->header('Content-Type') eq 'application/json';

		my $json;
		eval { $json = decode_json( $resp->content ); };
		return error("Got bad response from MitDK") unless $json && $json->{access_token};

		my ($ok, $error) = Net::MitDK->new->first_login($json)->wait;
		return error("Cannot get first re-authorization: $error") unless $ok;

		return html '<h2>Logged in to MidDK!</h2><p>Now you can start the mitdk server';
	},

	'/abort' => sub {
		$server->shutdown;
		return html '<h2>Installation aborted</h2>';
	},
);

$routes{'/'} = $routes{'/auth'};

($server, $error) = http_server {
	my $req = shift;
	if ( my $cb = $routes{$req->uri}) {
		return $cb->($req);
	} else {
		if ( $req->uri->path eq '/noeglekort') {
			$req->uri->path('/login.aspx/noeglekort');
		}
		$req->uri("https://nemlog-in.mitid.dk" . $req->uri->path);
		$req->header( Host    => 'nemlog-in.mitid.dk');
		if ( my $origin = $req->header('Origin')) {
			$origin =~ s[http://localhost:9999][https://nemlog-in.mitid.dk];
			$req->header( Origin => $origin);
		}
		if ( my $referer = $req->header('Referer')) {
			$referer =~ s[http://localhost:9999/step2][https://nemlog-in.mitid.dk/login.aspx/noeglekort];
			$req->header( Referer => $referer);
		}
		$req->headers->remove_header('Cookie');
		$req->header( 'Accept-Encoding' => 'identity');

		return $ua->request($req);
	}
} "localhost:$port", timeout => 10;
die $error unless $server;

print "Open a browser and go to this address:\n";
print "\n   http://localhost:$port/\n\n";
if ( $^O =~ /win32/i) {
	system "start /b http://localhost:$port";
}
$server->wait;
